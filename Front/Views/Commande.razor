@page "/commandes"
@using Front.Models
@using Front.ViewModels
@inject CommandesViewModel ViewModel
@inject IJSRuntime JSRuntime

<PageTitle>Liste des Commandes</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Gestion des Commandes</h1>

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="@(() => ViewModel.ErrorMessage = string.Empty)"></button>
        </div>
    }

    @if (ViewModel.IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-2">Chargement des commandes...</p>
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Liste des Commandes (@ViewModel.Commandes.Count)</h5>
                <button class="btn btn-light btn-sm" @onclick="RefreshCommandes">
                    <i class="bi bi-arrow-clockwise"></i> Actualiser
                </button>
            </div>
            <div class="card-body p-0">
                @if (ViewModel.Commandes.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Article</th>
                                    <th>Montant</th>
                                    <th>ID Utilisateur</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var commande in ViewModel.Commandes)
                                {
                                    <tr>
                                        <td>@commande.IdCommande</td>
                                        <td>@commande.NomArticle</td>
                                        <td>@commande.Montant €</td>
                                        <td>@commande.IdUtilisateur</td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary"
                                                        @onclick="@(() => NavigateToDetails(commande.IdCommande))"
                                                        title="Voir les détails">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning"
                                                        @onclick="@(() => NavigateToEdit(commande.IdCommande))"
                                                        title="Modifier">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger"
                                                        @onclick="@(() => DeleteCommande(commande.IdCommande))"
                                                        title="Supprimer">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-inbox" style="font-size: 3rem; color: #ccc;"></i>
                        <p class="text-muted mt-3">Aucune commande trouvée</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadCommandesAsync();
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task RefreshCommandes()
    {
        await ViewModel.LoadCommandesAsync();
    }

    private async Task DeleteCommande(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer cette commande ?"))
        {
            await ViewModel.DeleteCommandeAsync(id);
        }
    }

    private void NavigateToDetails(int id)
    {
        // Navigation.NavigateTo($"/commandes/{id}");
    }

    private void NavigateToEdit(int id)
    {
        // Navigation.NavigateTo($"/commandes/edit/{id}");
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }
}

<style>
    .btn-group .btn {
        margin: 0 2px;
    }

    .table td {
        vertical-align: middle;
    }
</style>