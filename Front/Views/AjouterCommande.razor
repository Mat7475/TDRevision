@page "/commandes/ajouter"
@using Front.Models
@using Front.Service
@inject IService<Commande, int, string> CommandeService
@inject IService<Utilisateur, int, string> UtilisateurService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Ajouter une Commande</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-plus-circle"></i> Nouvelle Commande
                    </h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @_errorMessage
                            <button type="button" class="btn-close" @onclick="@(() => _errorMessage = string.Empty)"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(_successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @_successMessage
                            <button type="button" class="btn-close" @onclick="@(() => _successMessage = string.Empty)"></button>
                        </div>
                    }

                    <EditForm Model="_nouvelleCommande" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="nomArticle" class="form-label">
                                <i class="bi bi-box"></i> Nom de l'article <span class="text-danger">*</span>
                            </label>
                            <InputText id="nomArticle"
                                       class="form-control"
                                       @bind-Value="_nouvelleCommande.NomArticle"
                                       placeholder="Ex: Ordinateur portable" />
                            <ValidationMessage For="@(() => _nouvelleCommande.NomArticle)" />
                        </div>

                        <div class="mb-3">
                            <label for="montant" class="form-label">
                                <i class="bi bi-currency-euro"></i> Montant <span class="text-danger">*</span>
                            </label>
                            <div class="input-group">
                                <InputText id="montant"
                                           class="form-control"
                                           @bind-Value="_nouvelleCommande.Montant"
                                           placeholder="Ex: 999.99" />
                                <span class="input-group-text">€</span>
                            </div>
                            <ValidationMessage For="@(() => _nouvelleCommande.Montant)" />
                        </div>

                        <div class="mb-4">
                            <label for="utilisateur" class="form-label">
                                <i class="bi bi-person"></i> Utilisateur <span class="text-danger">*</span>
                            </label>
                            @if (_isLoadingUtilisateurs)
                            {
                                <div class="text-center py-3">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Chargement...</span>
                                    </div>
                                    <span class="ms-2">Chargement des utilisateurs...</span>
                                </div>
                            }
                            else if (_utilisateurs.Any())
                            {
                                <InputSelect id="utilisateur"
                                             class="form-select"
                                             @bind-Value="_nouvelleCommande.IdUtilisateur">
                                    <option value="0">-- Sélectionnez un utilisateur --</option>
                                    @foreach (var utilisateur in _utilisateurs)
                                    {
                                        <option value="@utilisateur.IdUtilisateur">
                                            @utilisateur.Nom @utilisateur.Prenom (@utilisateur.Ville)
                                        </option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => _nouvelleCommande.IdUtilisateur)" />
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle"></i> Aucun utilisateur disponible
                                </div>
                            }
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button"
                                    class="btn btn-secondary"
                                    @onclick="RetourListe"
                                    disabled="@_isSubmitting">
                                <i class="bi bi-arrow-left"></i> Retour
                            </button>
                            <button type="submit"
                                    class="btn btn-primary"
                                    disabled="@_isSubmitting">
                                @if (_isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Enregistrement...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle"></i>
                                    <span> Créer la commande</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Commande _nouvelleCommande = new();
    private List<Utilisateur> _utilisateurs = new();
    private bool _isLoadingUtilisateurs = false;
    private bool _isSubmitting = false;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUtilisateurs();
    }

    private async Task LoadUtilisateurs()
    {
        try
        {
            _isLoadingUtilisateurs = true;
            var utilisateurs = await UtilisateurService.GetAllAsync();
            _utilisateurs = utilisateurs.ToList();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erreur lors du chargement des utilisateurs : {ex.Message}";
        }
        finally
        {
            _isLoadingUtilisateurs = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            _isSubmitting = true;
            _errorMessage = string.Empty;
            _successMessage = string.Empty;

            if (_nouvelleCommande.IdUtilisateur == 0)
            {
                _errorMessage = "Veuillez sélectionner un utilisateur";
                return;
            }

            await CommandeService.AddAsync(_nouvelleCommande);

            _successMessage = "Commande créée avec succès !";

            await Task.Delay(1500);
            Navigation.NavigateTo("/commandes");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erreur lors de la création de la commande : {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void RetourListe()
    {
        Navigation.NavigateTo("/commandes");
    }
}

<style>
    .form-label {
        font-weight: 500;
        color: #495057;
    }

    .form-control:focus, .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .card {
        border: none;
        border-radius: 0.5rem;
    }

    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
    }
</style>